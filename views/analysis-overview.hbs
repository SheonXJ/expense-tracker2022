{{>analysis-tabs}}

<canvas id="chart" width="200" height="50"></canvas>
<div class="container-fluid my-3">
  <div class="row body">
    <div class="col-12 col-lg-6">
      <h3>類別</h3>
      <div class="container categoryList">
        <div class="row">
          <div class="col-4"><canvas id="chartCategory0" width="200" height="200"></canvas></div>
          <div class="col-4"><canvas id="chartCategory1" width="200" height="200"></canvas></div>
          <div class="col-4"><canvas id="chartCategory2" width="200" height="200"></canvas></div>
        </div>
      </div>
    </div>
  
    <div class="col-12 col-lg-6">
      <h3>Top 3</h3>
      <div class="container recordList">
        {{#each topRecords}}
        <div class="d-flex align-items-center text-center border-bottom border-info">
          <div class="col-2">
            <i class='{{this.icon}}'></i>
          </div>
          <div class="col-4 flex-column text-left">
            <h4>{{this.name}}</h4>
            {{this.date}}
          </div>
          <div class="col-2">{{this.count}}</div>
          <div class="col-2">
            <a href="/records/{{this._id}}/edit">
              <button class="btn btn-primary">修改</button>
            </a>
          </div>
          <form action="/records/{{this._id}}?_method=DELETE" method="POST">
            <button type="submit" class="btn btn-danger">刪除</button>
          </form>
        </div>
        {{/each}}
      </div>
    </div>
  </div>
</div>




<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.2/Chart.min.js"></script>
<script>
  // 取得html元素
  const ctx = document.getElementById('chart').getContext("2d")
  const ctxCategory0 = document.getElementById('chartCategory0').getContext("2d")
  const ctxCategory1 = document.getElementById('chartCategory1').getContext("2d")
  const ctxCategory2 = document.getElementById('chartCategory2').getContext("2d")

  //data
  const doughnutColor = [
    'rgba(244,96,108,1)',
    'rgba(209,186,116,1)',
    'rgba(236,173,158,1)'
  ]
  // chart plugin for doughnut center HTML
  Chart.pluginService.register({
    beforeDraw: function (chart) {
      if (chart.config.options.elements.center) {
        //Get ctx from string
        var ctx = chart.chart.ctx;

        //Get options from the center object in options
        var centerConfig = chart.config.options.elements.center;
        var fontStyle = centerConfig.fontStyle || 'Arial';
        var txt = centerConfig.text;
        var color = centerConfig.color || '#000';
        var sidePadding = centerConfig.sidePadding || 20;
        var sidePaddingCalculated = (sidePadding / 100) * (chart.innerRadius * 2)
        //Start with a base font of 30px
        ctx.font = "30px " + fontStyle;

        //Get the width of the string and also the width of the element minus 10 to give it 5px side padding
        var stringWidth = ctx.measureText(txt).width;
        var elementWidth = (chart.innerRadius * 2) - sidePaddingCalculated;

        // Find out how much the font can grow in width.
        var widthRatio = elementWidth / stringWidth;
        var newFontSize = Math.floor(30 * widthRatio);
        var elementHeight = (chart.innerRadius * 2);

        // Pick a new font size so it will not be larger than the height of label.
        var fontSizeToUse = Math.min(newFontSize, elementHeight);

        //Set font settings to draw it correctly.
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        var centerX = ((chart.chartArea.left + chart.chartArea.right) / 2);
        var centerY = ((chart.chartArea.top + chart.chartArea.bottom) / 2);
        ctx.font = fontSizeToUse + "px " + fontStyle;
        ctx.fillStyle = color;

        //Draw text in center
        ctx.fillText(txt, centerX, centerY);
      }
    }
  });
  
  // 整理categoryRecords,將陣列拆開成單一物件
  {{#each categoryRecords}}
  const configDoughnut{{@index}} = {
    type: 'doughnut',
    data: {
      datasets: [{
        data: [{{this.count}}, {{this.subCount}}],
        backgroundColor: [
          doughnutColor[{{@index}}],
          "rgba(128,128,128,0.2)",
        ],
        label: 'Expenditures',
        hoverOffset: 5
      }],
      labels: [
        '{{this.categoryName}}'
      ],
    },
    options: {
      responsive: true,
      legend: {
        position: 'bottom',
      },
      
      title: {
        display: true,
        text: '${{this.count}}'
      },
      animation: {
        animateScale: true,
        animateRotate: true
      },
      elements: {
        center: {
          text: {{this.percent}} + '%',
          color: '#53565e', // Default is #000000
          fontStyle: 'Helvetica', // Default is Arial
          sidePadding: 50 // Default is 20 (as a percentage)
        }
      }
    }
  }
  const chart{{@index}} = new Chart(ctxCategory{{@index}}, configDoughnut{{@index}})
  {{/each}}


  // 設定Chart
  const configBar = {
    type: 'bar',
    data: {
      labels: ["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月"],
      datasets: [{
        label: '2022每月支出',
        data: [{{everyMonthCount}}],
        backgroundColor: [
          'rgba(255, 99, 132, 0.2)',
          'rgba(54, 162, 235, 0.2)',
          'rgba(255, 206, 86, 0.2)',
          'rgba(75, 192, 192, 0.2)',
          'rgba(153, 102, 255, 0.2)',
          'rgba(255, 159, 64, 0.2)',
          'rgba(255, 99, 132, 0.2)',
          'rgba(54, 162, 235, 0.2)',
          'rgba(255, 206, 86, 0.2)',
          'rgba(75, 192, 192, 0.2)',
          'rgba(153, 102, 255, 0.2)',
          'rgba(255, 159, 64, 0.2)',
        ],
        borderColor: [
          'rgba(255,99,132,1)',
          'rgba(54, 162, 235, 1)',
          'rgba(255, 206, 86, 1)',
          'rgba(75, 192, 192, 1)',
          'rgba(153, 102, 255, 1)',
          'rgba(255, 159, 64, 1)',
          'rgba(255,99,132,1)',
          'rgba(54, 162, 235, 1)',
          'rgba(255, 206, 86, 1)',
          'rgba(75, 192, 192, 1)',
          'rgba(153, 102, 255, 1)',
          'rgba(255, 159, 64, 1)'
        ],
        borderWidth: 1
      }]
    },
  }
  const chart = new Chart(ctx, configBar)
</script>