{{>analysis-tabs}}
<canvas id="chart" width="200" height="50"></canvas>
<div class="container">
  <div class="row">
    {{#each records}}
    <div class="col-6 my-3">
      <div class="accordion" id="categoryAccordion{{@index}}">
        <div class="card  bg-light">
          <div class="bg-info rounded" id="headingOne">
            <button class="btn btn-info btn-block text-left" type="button" data-toggle="collapse"
              data-target="#category{{@index}}" aria-expanded="true" aria-controls="collapseOne">
              <div class="d-flex align-items-center">
                <div class="col-2 align-items-center text-left">
                  <i class='{{this.category_docs.[0].name_icon}}'></i>
                </div>
                <div class="col-8">
                  <b class="fs-6">{{this.category_docs.[0].name_cn}}</b>
                </div>
                <div class="col-4">
                  <b class="fs-6">${{this.total}}</b>
                </div>
              </div>
            </button>
          </div>

          <div id="category{{@index}}" class="collapse show my-3" aria-labelledby="headingOne"
            data-parent="#categoryAccordion{{@index}}">
            {{#each this.records}}
            <div class="d-flex align-items-center text-center mb-2">
              <div class="col-2 text-left">
                <h4>{{this.name}}</h4>
              </div>
              <div class="col-4 text-left">
                {{this.date}}
              </div>
              <div class="col-2"><strong>${{this.count}}</strong></div>
              <div class="col-2">
                <a href="/records/{{this._id}}/edit">
                  <button class="btn btn-outline-primary">修改</button>
                </a>
              </div>
              <form action="/records/{{this._id}}?_method=DELETE" method="POST">
                <button type="submit" class="btn btn-outline-danger"
                  onclick="return confirm(`確定要刪除 {{ this.name }} 嗎？`)">刪除</button>
              </form>
            </div>
            {{/each}}
          </div>
        </div>
      </div>
    </div>
    {{/each}}
  </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.2/Chart.min.js"></script>
<script>
  const ctx = document.getElementById('chart').getContext('2d')
  const currentMonth = {{currentMonthIndex}}
  Chart.pluginService.register({
    beforeDraw: function (chart) {
      if (chart.config.options.elements.center) {
        //Get ctx from string
        var ctx = chart.chart.ctx;

        //Get options from the center object in options
        var centerConfig = chart.config.options.elements.center;
        var fontStyle = centerConfig.fontStyle || 'Arial';
        var txt = centerConfig.text;
        var color = centerConfig.color || '#000';
        var sidePadding = centerConfig.sidePadding || 20;
        var sidePaddingCalculated = (sidePadding / 100) * (chart.innerRadius * 2)
        //Start with a base font of 30px
        ctx.font = "30px " + fontStyle;

        //Get the width of the string and also the width of the element minus 10 to give it 5px side padding
        var stringWidth = ctx.measureText(txt).width;
        var elementWidth = (chart.innerRadius * 2) - sidePaddingCalculated;

        // Find out how much the font can grow in width.
        var widthRatio = elementWidth / stringWidth;
        var newFontSize = Math.floor(30 * widthRatio);
        var elementHeight = (chart.innerRadius * 2);

        // Pick a new font size so it will not be larger than the height of label.
        var fontSizeToUse = Math.min(newFontSize, elementHeight);

        //Set font settings to draw it correctly.
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        var centerX = ((chart.chartArea.left + chart.chartArea.right) / 2);
        var centerY = ((chart.chartArea.top + chart.chartArea.bottom) / 2);
        ctx.font = fontSizeToUse + "px " + fontStyle;
        ctx.fillStyle = color;

        //Draw text in center
        ctx.fillText(txt, centerX, centerY);
      }
    }
  })
  
  const configDoughnut = {
    type: 'doughnut',
    data: {
      datasets: [{
        data: [
          {{#each records}}{{this.total}},{{/each}}
        ],
        backgroundColor: [
          "#F7464A",
          "#46BFBD",
          "#FDB45C",
          "#949FB1",
          "#4D5360",
        ],
        label: 'Expenditures',
        hoverOffset: 5
      }],
      labels: [
        {{#each records}}'{{this.category_docs.[0].name_cn}}', {{/each}}
      ],
    },
    options: {
      responsive: true,
        legend: {
        position: 'bottom',
      },
      title: {
        display: true,
          text: ({{currentMonthIndex}} + 1) + '月消費',
          fontSize: 20
      },
      animation: {
        animateScale: true,
          animateRotate: true
      },
      tooltips: {
        callbacks: {
          label: function (tooltipItem, data) {
            var dataset = data.datasets[tooltipItem.datasetIndex];
            var total = dataset.data.reduce(function (previousValue, currentValue, currentIndex, array) {
              return previousValue + currentValue;
            });
            var currentValue = dataset.data[tooltipItem.index];
            var precentage = Math.floor(((currentValue / total) * 100) + 0.5);
            return precentage + "%";
          }
        }
      },
      elements: {
        center: {
          text: '${{everyCategoryCount}}',
          color: '#53565e', // Default is #000000
          fontStyle: 'Helvetica', // Default is Arial
          sidePadding: 30 // Default is 20 (as a percentage)
        }
      }
    }
  }

  const categoryChart = new Chart(ctx, configDoughnut)
</script>